#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 73 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 7 #"Monaco\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 1726 0 17 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 24 29 1 #"\n"
0 0 26 3 7 #"#reader"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"htdp-advanced-reader.ss\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"lang\""
0 0 24 3 3 #")(("
0 0 14 3 7 #"modname"
0 0 24 3 1 #" "
0 0 14 3 16 #"spiral_animation"
0 0 24 3 3 #") ("
0 0 14 3 19 #"read-case-sensitive"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 10 #"teachpacks"
0 0 24 3 6 #" ()) ("
0 0 14 3 13 #"htdp-settings"
0 0 24 3 3 #" #("
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 11 #"constructor"
0 0 24 3 1 #" "
0 0 14 3 17 #"repeating-decimal"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 4 #"none"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 6 #" ())))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 18 #"picturing-programs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 18 #"math/number-theory"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; spiral-animation: struct -> image"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; takes in a few variables from the struct, uses info to track pixel"
 #" positions"
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#"; draws image by overlaying the pixels and their coordinates"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; CONSTANTS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; pixel-constants:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"px-size"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"px-color"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"px-blank-color"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-color"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"px-i-pos"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"px-move"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; window-constants:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"w-side"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"w-color"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-color"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; animation-limit-number:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"an-lim-num"
0 0 24 3 1 #" "
0 0 21 3 4 #"4096"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; DEFINITIONS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; pixel-image:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"px-image"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 7 #"px-size"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 14 3 8 #"px-color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; blank-pixel:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"px-blank"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 7 #"px-size"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 14 3 14 #"px-blank-color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; window-image:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"w-image"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 6 #"w-side"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 14 3 7 #"w-color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #"; px-s: px-pos(posn) shape(image) dir(string) count(number) lim(numb"
 #"er) count(number) -> struct"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; uses the following to create a pixel to draw out a rectangular spi"
 #"ral"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; inventory:"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; px-pos -> shows where to place pixel"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; shape -> tells what image to show"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; dir -> tells what directions the pixels are placed"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; place -> tells position on one side of spiral"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; lim -> tells the number of times a pixel can be placed"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; count -> counts number of times the limit is reached"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; pixel-struct and definition:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 2 #" ("
0 0 14 3 6 #"px-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"shape"
0 0 24 3 1 #" "
0 0 14 3 4 #"back"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 14 3 3 #"lim"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"px"
0 0 24 3 2 #" ("
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 14 3 8 #"px-i-pos"
0 0 24 3 1 #" "
0 0 14 3 8 #"px-blank"
0 0 24 3 1 #" "
0 0 14 3 7 #"w-image"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; FUNCTIONS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; minor-functions:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; conditions:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; place-lim-eq?: px-s(struct) -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; checks true or false if the place and limit in the struct are equa"
 #"l"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"place-lim-eq?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 10 #"px-s-place"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 8 #"px-s-lim"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"place-lim-eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"px"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; dir-left?: px-s(struct) -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; checks if the direction in the struct is left"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"dir-left?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"px-s-dir"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"dir-left?"
0 0 24 3 1 #" "
0 0 14 3 2 #"px"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; dir-right?: px-s(struct) -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; checks if the direction in the struct is right"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"dir-right?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"px-s-dir"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"dir-right?"
0 0 24 3 1 #" "
0 0 14 3 2 #"px"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; dir-up?: px-s(struct) -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; checks if the direction in the struct is up"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"dir-up?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"px-s-dir"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"dir-up?"
0 0 24 3 1 #" "
0 0 14 3 2 #"px"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; dir-down?: px-s(struct) -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; checks if the direction in the struct is down"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"dir-down?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"px-s-dir"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"dir-down?"
0 0 24 3 1 #" "
0 0 14 3 2 #"px"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; lim-eq-2? px-s(struct) -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; checks if the limit in the struct is equal to 2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-eq-2?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 10 #"px-s-count"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-eq-2?"
0 0 24 3 1 #" "
0 0 14 3 2 #"px"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; prime-place-check: px-s(struct) -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; grabs the place of the struct, tells if it is a prime number"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"prime-pos-check"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"prime?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"px-s-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; actions:"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; pos-left: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; take the initial position, decreases the x coordinate"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"pos-left"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 6 #"px-pos"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"px-s-px-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #")) "
0 0 14 3 7 #"px-move"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 11 #"px-s-px-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";(check-expect (pos-left px) (px-s (make-posn -4 0) "
0 12           4 17 159
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(stru"
 #"ct:point 4 0) #(struct:point 4 4) #(struct:point 0 4)) 255 \"black\""
 #")) #(struct:bb 4 4 4) #f)"
) 0 0 17 3 16 #" \"right\" 0 1 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; pos-right: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; take the initial position, increases the x coordinate"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pos-right"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 6 #"px-pos"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"px-s-px-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #")) "
0 0 14 3 7 #"px-move"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 11 #"px-s-px-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 9 #"pos-right"
0 0 17 3 1 #" "
0 0 17 3 2 #"px"
0 0 17 3 3 #") ("
0 0 17 3 4 #"px-s"
0 0 17 3 2 #" ("
0 0 17 3 9 #"make-posn"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 12           4 17 159
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(stru"
 #"ct:point 4 0) #(struct:point 4 4) #(struct:point 0 4)) 255 \"black\""
 #")) #(struct:bb 4 4 4) #f)"
) 0 0 17 3 16 #" \"right\" 0 1 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; pos-up: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; take the initial position, increases the y coordinate"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"pos-up"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 6 #"px-pos"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"px-s-px-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 11 #"px-s-px-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #")) "
0 0 14 3 7 #"px-move"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 6 #"pos-up"
0 0 17 3 1 #" "
0 0 17 3 2 #"px"
0 0 17 3 3 #") ("
0 0 17 3 4 #"px-s"
0 0 17 3 2 #" ("
0 0 17 3 9 #"make-posn"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 2 #") "
0 12           4 17 159
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(stru"
 #"ct:point 4 0) #(struct:point 4 4) #(struct:point 0 4)) 255 \"black\""
 #")) #(struct:bb 4 4 4) #f)"
) 0 0 17 3 16 #" \"right\" 0 1 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; pos-down: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; take the initial position, decreases the y coordinate"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"pos-down"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 6 #"px-pos"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"px-s-px-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 11 #"px-s-px-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #")) "
0 0 14 3 7 #"px-move"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 8 #"pos-down"
0 0 17 3 1 #" "
0 0 17 3 2 #"px"
0 0 17 3 3 #") ("
0 0 17 3 4 #"px-s"
0 0 17 3 2 #" ("
0 0 17 3 9 #"make-posn"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"-4"
0 0 17 3 2 #") "
0 12           4 17 159
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(stru"
 #"ct:point 4 0) #(struct:point 4 4) #(struct:point 0 4)) 255 \"black\""
 #")) #(struct:bb 4 4 4) #f)"
) 0 0 17 3 16 #" \"right\" 0 1 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; place-add: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; increases the placement in the struct by one"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"place-add"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 5 #"place"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 10 #"px-s-place"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 9 #"place-add"
0 0 17 3 1 #" "
0 0 17 3 2 #"px"
0 0 17 3 3 #") ("
0 0 17 3 4 #"px-s"
0 0 17 3 2 #" ("
0 0 17 3 9 #"make-posn"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 12           4 17 159
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(stru"
 #"ct:point 4 0) #(struct:point 4 4) #(struct:point 0 4)) 255 \"black\""
 #")) #(struct:bb 4 4 4) #f)"
) 0 0 17 3 16 #" \"right\" 1 1 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; place-reset: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; resets the placement to zero"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"place-reset"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";(check-expect (place-reset (place-add px)) px)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; dir-change-left: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; changes the direction of the struct left"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"dir-change-left"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 15 #"dir-change-left"
0 0 17 3 1 #" "
0 0 17 3 2 #"px"
0 0 17 3 3 #") ("
0 0 17 3 4 #"px-s"
0 0 17 3 2 #" ("
0 0 17 3 9 #"make-posn"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 12           4 17 135
(
 #"(#(struct:polygon (#(struct:point 0 0) #(struct:point 4 0) #(struct:"
 #"point 4 4) #(struct:point 0 4)) 255 \"black\") #(struct:bb 4 4 4) #f"
 #")"
) 0 0 17 3 15 #" \"left\" 0 1 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; dir-change-right: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; changes the direction of the struct right"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"dir-change-right"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 16 #"dir-change-right"
0 0 17 3 1 #" "
0 0 17 3 2 #"px"
0 0 17 3 3 #") ("
0 0 17 3 4 #"px-s"
0 0 17 3 2 #" ("
0 0 17 3 9 #"make-posn"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 12           4 17 135
(
 #"(#(struct:polygon (#(struct:point 0 0) #(struct:point 4 0) #(struct:"
 #"point 4 4) #(struct:point 0 4)) 255 \"black\") #(struct:bb 4 4 4) #f"
 #")"
) 0 0 17 3 16 #" \"right\" 0 1 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; dir-change-up: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; changes the direction of the struct up"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"dir-change-up"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 13 #"dir-change-up"
0 0 17 3 1 #" "
0 0 17 3 2 #"px"
0 0 17 3 3 #") ("
0 0 17 3 4 #"px-s"
0 0 17 3 2 #" ("
0 0 17 3 9 #"make-posn"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 12           4 17 135
(
 #"(#(struct:polygon (#(struct:point 0 0) #(struct:point 4 0) #(struct:"
 #"point 4 4) #(struct:point 0 4)) 255 \"black\") #(struct:bb 4 4 4) #f"
 #")"
) 0 0 17 3 13 #" \"up\" 0 1 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; dir-change-down: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; changes the direction of the struct left"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"dir-change-down"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 15 #"dir-change-down"
0 0 17 3 1 #" "
0 0 17 3 2 #"px"
0 0 17 3 3 #") ("
0 0 17 3 4 #"px-s"
0 0 17 3 2 #" ("
0 0 17 3 9 #"make-posn"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 12           4 17 135
(
 #"(#(struct:polygon (#(struct:point 0 0) #(struct:point 4 0) #(struct:"
 #"point 4 4) #(struct:point 0 4)) 255 \"black\") #(struct:bb 4 4 4) #f"
 #")"
) 0 0 17 3 15 #" \"down\" 0 1 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; lim-add: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; increases the limit in the struct by one"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"lim-add"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 3 #"lim"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 8 #"px-s-lim"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 7 #"lim-add"
0 0 17 3 1 #" "
0 0 17 3 2 #"px"
0 0 17 3 3 #") ("
0 0 17 3 4 #"px-s"
0 0 17 3 2 #" ("
0 0 17 3 9 #"make-posn"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 12           4 17 159
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(stru"
 #"ct:point 4 0) #(struct:point 4 4) #(struct:point 0 4)) 255 \"black\""
 #")) #(struct:bb 4 4 4) #f)"
) 0 0 17 3 16 #" \"right\" 0 2 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; count-add: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; increases the count in the struct by one"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"count-add"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 5 #"count"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 10 #"px-s-count"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 9 #"count-add"
0 0 17 3 1 #" "
0 0 17 3 2 #"px"
0 0 17 3 3 #") ("
0 0 17 3 4 #"px-s"
0 0 17 3 2 #" ("
0 0 17 3 9 #"make-posn"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 12           4 17 159
(
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:point 0 0) #(stru"
 #"ct:point 4 0) #(struct:point 4 4) #(struct:point 0 4)) 255 \"black\""
 #")) #(struct:bb 4 4 4) #f)"
) 0 0 17 3 16 #" \"right\" 0 1 1))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; count-reset: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; resets the count to zero"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-reset"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";(check-expect (count-reset px) px)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; change-shape-blank: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; turns object into a blank square, showing it is not a prime"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"change-shape"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 5 #"shape"
0 0 24 3 1 #" "
0 0 14 3 8 #"px-image"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"change-shape-blank"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 5 #"shape"
0 0 24 3 1 #" "
0 0 14 3 8 #"px-blank"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; major-functions:"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; prime-checker: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; checks if the current value of the position is a prime"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; changes the color accordingly"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"prime-checker"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 15 #"prime-pos-check"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 18 #"change-shape-blank"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 15 #"prime-pos-check"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"change-shape"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pos-add"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #" ["
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 8 #"px-s-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; dir-pos: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; increases or decreases x and y coordinates depending on the direct"
 #"ion"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"dir-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 9 #"dir-left?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 8 #"pos-left"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 10 #"dir-right?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 9 #"pos-right"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"dir-up?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 6 #"pos-up"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"dir-down?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 8 #"pos-down"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 7 #"dir-pos"
0 0 17 3 1 #" "
0 0 17 3 2 #"px"
0 0 17 3 3 #") ("
0 0 17 3 4 #"px-s"
0 0 17 3 2 #" ("
0 0 17 3 9 #"make-posn"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 12           4 17 135
(
 #"(#(struct:polygon (#(struct:point 0 0) #(struct:point 4 0) #(struct:"
 #"point 4 4) #(struct:point 0 4)) 255 \"black\") #(struct:bb 4 4 4) #f"
 #")"
) 0 0 17 3 16 #" \"right\" 0 1 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; place-increase: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; increases place value when pixel moves"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"pcd-bind"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"pos-add"
0 0 24 3 2 #" ("
0 0 14 3 7 #"dir-pos"
0 0 24 3 2 #" ("
0 0 14 3 13 #"prime-checker"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"place-increase"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"place-add"
0 0 24 3 2 #" ("
0 0 14 3 8 #"pcd-bind"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; dir-changer: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; changes the direction in the struct depending on the current"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"dir-changer"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 9 #"dir-left?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 15 #"dir-change-down"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 10 #"dir-right?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 13 #"dir-change-up"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"dir-up?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 15 #"dir-change-left"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"dir-down?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 16 #"dir-change-right"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 2 #" ("
0 0 17 3 11 #"dir-changer"
0 0 17 3 1 #" "
0 0 17 3 2 #"px"
0 0 17 3 3 #") ("
0 0 17 3 4 #"px-s"
0 0 17 3 2 #" ("
0 0 17 3 9 #"make-posn"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 12           4 17 135
(
 #"(#(struct:polygon (#(struct:point 0 0) #(struct:point 4 0) #(struct:"
 #"point 4 4) #(struct:point 0 4)) 255 \"black\") #(struct:bb 4 4 4) #f"
 #")"
) 0 0 17 3 13 #" \"up\" 0 1 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; reset-add-change: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; changes the direction, adds to the count, and resets the place"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"reset-add-change"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"dir-changer"
0 0 24 3 2 #" ("
0 0 14 3 9 #"count-add"
0 0 24 3 2 #" ("
0 0 14 3 11 #"place-reset"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; count-reset-lim-inc: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; resets the count when at two and adds one to the limit"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"count-reset-lim-inc"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"lim-add"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-reset"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; tick-handler: px-s(struct) -> struct"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; takes in ALL the conditions and actions to manage a dynamic struct"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"sub-tick-handler"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 11 #"count-eq-2?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 19 #"count-reset-lim-inc"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 13 #"place-lim-eq?"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 16 #"reset-add-change"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 14 #"place-increase"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tick-handler"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tick-handler"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"px-s"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"back"
0 0 24 3 2 #" ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 10 #"px-s-shape"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 7 #"w-image"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"px-s-px-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 2 #" ("
0 0 14 3 12 #"image-height"
0 0 24 3 1 #" "
0 0 14 3 7 #"w-image"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 11 #"px-s-px-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"px-s-back"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; draw-handler: px-s(struct) -> image"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; takes elements from struct to make spiral"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"draw-handler"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 10 #"px-s-shape"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 7 #"w-image"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"px-s-px-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 2 #" ("
0 0 14 3 12 #"image-height"
0 0 24 3 1 #" "
0 0 14 3 7 #"w-image"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 11 #"px-s-px-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"px-s-back"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"stopper"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 8 #"px-s-pos"
0 0 24 3 1 #" "
0 0 15 3 6 #"struct"
0 0 24 3 2 #") "
0 0 14 3 10 #"an-lim-num"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; big-bang"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"big-bang"
0 0 24 3 1 #" "
0 0 14 3 2 #"px"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"on-draw"
0 0 24 3 1 #" "
0 0 14 3 12 #"draw-handler"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 16 #"sub-tick-handler"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.01"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"stop-when"
0 0 24 3 1 #" "
0 0 14 3 7 #"stopper"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0           0
